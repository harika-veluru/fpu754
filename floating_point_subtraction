module floating_point_subtraction(
    input [31:0] a, // 32-bit input floating-point number a
    input [31:0] b, // 32-bit input floating-point number b
    output [31:0] result // 32-bit output floating-point number result
);
    // Extract the sign, exponent, and mantissa from the input floating-point numbers
    wire sign_a = a[31];
    wire sign_b = b[31];
    wire [7:0] exponent_a = a[30:23];
    wire [7:0] exponent_b = b[30:23];
    wire [23:0] mantissa_a = {1'b1, a[22:0]};
    wire [23:0] mantissa_b = {1'b1, b[22:0]};

    wire [7:0] exponent_diff;
    wire [23:0] mantissa_b_shifted;
    wire [24:0] mantissa_diff;
    wire [7:0] result_exponent;
  wire [22:0] result_mantissa;
    wire result_sign;
	
    // Align exponents
    assign exponent_diff = (exponent_a > exponent_b) ? (exponent_a - exponent_b) : (exponent_b - exponent_a);
    assign mantissa_b_shifted = (exponent_a > exponent_b) ? (mantissa_b >> exponent_diff) : (mantissa_b << exponent_diff);

    // Perform subtraction
    assign mantissa_diff = (exponent_a > exponent_b) ? (mantissa_a - mantissa_b_shifted) : (mantissa_b_shifted - mantissa_a);

    // Normalize result
    reg [7:0] normalized_exponent;
    reg [23:0] normalized_mantissa;
    reg found_leading_one;
    integer i;

    always @(*) begin
        if (mantissa_diff == 0) begin
            normalized_exponent = 0;
            normalized_mantissa = 0;
        end else begin
            normalized_exponent = (exponent_a > exponent_b) ? exponent_a : exponent_b;
            normalized_mantissa = mantissa_diff[23:0]; // Take 23 bits from mantissa_diff
            found_leading_one = 0;
            for (i = 23; i >= 0; i = i - 1) begin
                if (!found_leading_one && normalized_mantissa[i] == 1'b1) begin
                    found_leading_one = 1;
                    normalized_mantissa = normalized_mantissa << (23 - i);
                    normalized_exponent = normalized_exponent - (23 - i);
                end
            end
        end
    end

    // Assemble the final result
    assign result_sign = (a[30:0] >= b[30:0]) ? sign_a : sign_b;
    assign result_exponent = normalized_exponent + 126; // Adjusting the exponent bias
    assign result_mantissa = normalized_mantissa[22:0];

  assign result = {result_sign, normalized_exponent, result_mantissa};

endmodule
